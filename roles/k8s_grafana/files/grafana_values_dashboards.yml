## Configure grafana dashboard providers
## ref: http://docs.grafana.org/administration/provisioning/#dashboards
##
## `path` must be /var/lib/grafana/dashboards/<provider_name>
##
dashboardProviders:
  dashboardproviders.yaml:
    apiVersion: 1
    providers:
      - name: "default"
        orgId: 1
        folder: ""
        type: file
        disableDeletion: true
        editable: false
        allowUiUpdates: false
        options:
          path: /var/lib/grafana/dashboards/default

## Configure grafana dashboard to import
## NOTE: To use dashboards you must also enable/configure dashboardProviders
## ref: https://grafana.com/dashboards
##
## dashboards per provider, use provider name as key.
##
dashboards:
  default:
    # Physical Machines
    node-exporter-full:
      gnetId: 1860
      revision: 36
      datasource:
        - name: DS_PROMETHEUS
          value: Prometheus
    ###### Kubernetes #############
    # Kubernetes monitorings
    kubernetes-views-global:
      gnetId: 15757
      revision: 37
      datasource:
        - name: DS_PROMETHEUS
          value: Prometheus
    kubernetes-views-namespaces:
      gnetId: 15758
      revision: 34
      datasource:
        - name: DS_PROMETHEUS
          value: Prometheus
    kubernetes-views-nodes:
      gnetId: 15759
      revision: 29
      datasource:
        - name: DS_PROMETHEUS
          value: Prometheus
    kubernetes-views-pods:
      gnetId: 15760
      revision: 26
      datasource:
        - name: DS_PROMETHEUS
          value: Prometheus
    kubernetes-system-coredns:
      gnetId: 15762
      revision: 17
      datasource:
        - name: DS_PROMETHEUS
          value: Prometheus
    logs-app:
      gnetId: 13639
      revision: 2
      datasource:
        - name: DS_LOKI
          value: Loki
    kubernetes-event-exporter:
      gnetId: 17882
      revision: 2
      datasource:
        - name: DS_LOKI
          value: Loki
    # Kubernetes > Ingress > Ingress Controller
    nginx-ingress-controller:
      gnetId: 9614
      revision: 1
      datasource:
        - name: DS_PROMETHEUS
          value: Prometheus

    ##### Applications ##########
    # Applications > Gitea
    gitea:
      gnetId: 13192
      revision: 1
      datasource:
        - name: DS_PROMETHEUS
          value: Prometheus
    # Applications > Jenkins
    jenkins-performance-and-health-overview:
      gnetId: 9964
      revision: 1
      datasource:
        - name: DS_PROMETHEUS
          value: Prometheus
    # Applications > Spring Boot
    spring-boot-observability:
      gnetId: 17175
      revision: 2
      datasource:
        - name: DS_PROMETHEUS
          value: Prometheus
        - name: DS_LOKI
          value: Loki
    # Applications > Node JS
    node-js-application-dashboard:
      gnetId: 11159
      revision: 1
      datasource:
        - name: DS_PROMETHEUS
          value: Prometheus

    #### Databases ##############
    # Database > Postgresql
    postgresql-database:
      gnetId: 9628
      revision: 7
      datasource:
        - name: DS_PROMETHEUS
          value: Prometheus
    # Database > MongoDB
    mongodb-database:
      gnetId: 2583
      revision: 2
      datasource:
        - name: DS_PROMETHEUS
          value: Prometheus

    #### Messaging ############
    # Messaging > RabbitMQ
    rabbitmq-overview:
      gnetId: 10991
      revision: 14
      datasource:
        - name: DS_PROMETHEUS
          value: Prometheus

## Reference to external ConfigMap per provider. Use provider name as key and ConfigMap name as value.
## A provider dashboards must be defined either by external ConfigMaps or in values.yaml, not in both.
## ConfigMap data example:
##
## data:
##   example-dashboard.json: |
##     RAW_JSON
##
dashboardsConfigMaps: {}
#  default: ""
