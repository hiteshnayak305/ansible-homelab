# Default values for gitea.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## @param replicaCount number of replicas for the statefulset
replicaCount: 1

## @param clusterDomain cluster domain
clusterDomain: cluster.local

## @section Image
## @param image.registry image registry, e.g. gcr.io,docker.io
## @param image.repository Image to start for this pod
## @param image.tag Visit: [Image tag](https://hub.docker.com/r/gitea/gitea/tags?page=1&ordering=last_updated). Defaults to `appVersion` within Chart.yaml.
## @param image.digest Image digest. Allows to pin the given image tag. Useful for having control over mutable tags like `latest`
## @param image.pullPolicy Image pull policy
## @param image.rootless Wether or not to pull the rootless version of Gitea, only works on Gitea 1.14.x or higher
## @param image.fullOverride Completely overrides the image registry, path/image, tag and digest. **Adjust `image.rootless` accordingly and review [Rootless defaults](#rootless-defaults).**
image:
  registry: docker.io
  repository: hiteshnayak305/gitea
  # Overrides the image tag whose default is the chart appVersion.
  # tag: ""

## @section Service
service:
  ## @param service.http.type Kubernetes service type for web traffic
  ## @param service.http.port Port number for web traffic
  ## @param service.http.clusterIP ClusterIP setting for http autosetup for statefulset is None
  ## @param service.http.loadBalancerIP LoadBalancer IP setting
  ## @param service.http.nodePort NodePort for http service
  ## @param service.http.externalTrafficPolicy If `service.http.type` is `NodePort` or `LoadBalancer`, set this to `Local` to enable source IP preservation
  ## @param service.http.externalIPs External IPs for service
  ## @param service.http.ipFamilyPolicy HTTP service dual-stack policy
  ## @param service.http.ipFamilies HTTP service dual-stack familiy selection,for dual-stack parameters see official kubernetes [dual-stack concept documentation](https://kubernetes.io/docs/concepts/services-networking/dual-stack/).
  ## @param service.http.loadBalancerSourceRanges Source range filter for http loadbalancer
  ## @param service.http.annotations HTTP service annotations
  http:
    type: ClusterIP
    port: 3000

  ## @param service.ssh.type Kubernetes service type for ssh traffic
  ## @param service.ssh.port Port number for ssh traffic
  ## @param service.ssh.clusterIP ClusterIP setting for ssh autosetup for statefulset is None
  ## @param service.ssh.loadBalancerIP LoadBalancer IP setting
  ## @param service.ssh.nodePort NodePort for ssh service
  ## @param service.ssh.externalTrafficPolicy If `service.ssh.type` is `NodePort` or `LoadBalancer`, set this to `Local` to enable source IP preservation
  ## @param service.ssh.externalIPs External IPs for service
  ## @param service.ssh.ipFamilyPolicy SSH service dual-stack policy
  ## @param service.ssh.ipFamilies SSH service dual-stack familiy selection,for dual-stack parameters see official kubernetes [dual-stack concept documentation](https://kubernetes.io/docs/concepts/services-networking/dual-stack/).
  ## @param service.ssh.hostPort HostPort for ssh service
  ## @param service.ssh.loadBalancerSourceRanges Source range filter for ssh loadbalancer
  ## @param service.ssh.annotations SSH service annotations
  ssh:
    type: ClusterIP
    port: 22

## @section Ingress
## @param ingress.enabled Enable ingress
## @param ingress.className Ingress class name
## @param ingress.annotations Ingress annotations
## @param ingress.hosts[0].host Default Ingress host
## @param ingress.hosts[0].paths[0].path Default Ingress path
## @param ingress.hosts[0].paths[0].pathType Ingress path type
## @param ingress.tls Ingress tls settings
## @extra ingress.apiVersion Specify APIVersion of ingress object. Mostly would only be used for argocd.
ingress:
  enabled: true
  className: nginx
  #annotations: -> template
  #hosts: -> template
  #tls: -> template
  # Mostly for argocd or any other CI that uses `helm template | kubectl apply` or similar
  # If helm doesn't correctly detect your ingress API version you can set it here.
  # apiVersion: networking.k8s.io/v1

## @section StatefulSet
#
## @param resources Kubernetes resources
resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    cpu: 500m
    memory: 1Gi
  requests:
    cpu: 250m
    memory: 512Mi

## @section Persistence
#
## @param persistence.enabled Enable persistent storage
## @param persistence.existingClaim Use an existing claim to store repository information
## @param persistence.size Size for persistence to store repo information
## @param persistence.accessModes AccessMode for persistence
## @param persistence.labels Labels for the persistence volume claim to be created
## @param persistence.annotations Annotations for the persistence volume claim to be created
## @param persistence.storageClass Name of the storage class to use
## @param persistence.subPath Subdirectory of the volume to mount at
persistence:
  enabled: true
  create: false
  claimName: pvc-gitea
  size: 10Gi

# Configure commit/action signing prerequisites
## @section Signing
#
## @param signing.enabled Enable commit/action signing
## @param signing.gpgHome GPG home directory
## @param signing.privateKey Inline private gpg key for signed Gitea actions
## @param signing.existingSecret Use an existing secret to store the value of `signing.privateKey`
signing:
  enabled: true
  existingSecret: gitea-gpg-key

## @section Gitea
#
gitea:
  ## @param gitea.admin.username Username for the Gitea admin user
  ## @param gitea.admin.existingSecret Use an existing secret to store admin user credentials
  ## @param gitea.admin.password Password for the Gitea admin user
  ## @param gitea.admin.email Email for the Gitea admin user
  admin:
    existingSecret: gitea-admin-secret
    #email: -> template

  ## @param gitea.config  Configuration for the Gitea server,ref: [config-cheat-sheet](https://docs.gitea.io/en-us/config-cheat-sheet/)
  config:
    server:
      #DOMAIN: -> template
      #ROOT_URL: -> template
      #SSH_DOMAIN: -> template
      START_SSH_SERVER: true
      ENABLE_PPROF: true
      LFS_JWT_SECRET: SV-R-AN52OEuL6zstu6YLa9aXVnfODGZiWEHPk8Ishw
    repository.signing:
      SIGNING_KEY: 7BC3C3533076A13F
      SIGNING_NAME: Gitea
      #SIGNING_EMAIL: -> template
    webhook:
      #ALLOWED_HOST_LIST: -> template
    security:
      INTERNAL_TOKEN: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2ODg3Mjk4NjB9.GyUJFZfuDFqDsklP2soIo5zbXI9Q_yAJcd4e4iDVK0A
      SECRET_KEY: qj8auJEw72KujPiveq6aHBLEp87qD4M9ILgbRmDZBDjeu69SdKsWGedaphlYok6V
      MIN_PASSWORD_LENGTH: 6
    oauth2:
      JWT_SECRET: _CCcxucHzz1-VxK0UluNqTj6mCjUuO9f-sni3jHwRiE
    oauth2_client:
      ENABLE_AUTO_REGISTRATION: true
      # OPENID_CONNECT_SCOPES:
    service:
      DISABLE_REGISTRATION: true
    cron:
      ENABLED: true
    git.timeout:
      MIGRATE: 1800
      MIRROR: 1800
      CLONE: 1800
      PULL: 1800
    metrics:
      # ENABLED: true
      TOKEN: ""
    ## #356 https://gitea.com/gitea/helm-chart/issues/356
    session:
      PROVIDER: redis-cluster
      PROVIDER_CONFIG: redis+cluster://:gitea@gitea-redis-cluster-headless.gitea-system.svc.cluster.local:6379/0?pool_size=100&idle_timeout=180s&
    cache:
      ENABLED: true
      ADAPTER: redis-cluster
      HOST: redis+cluster://:gitea@gitea-redis-cluster-headless.gitea-system.svc.cluster.local:6379/0?pool_size=100&idle_timeout=180s&
    queue:
      TYPE: redis
      CONN_STR: redis+cluster://:gitea@gitea-redis-cluster-headless.gitea-system.svc.cluster.local:6379/0?pool_size=100&idle_timeout=180s&

  ## @param gitea.metrics.enabled Enable Gitea metrics
  ## @param gitea.metrics.serviceMonitor.enabled Enable Gitea metrics service monitor
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

## @section redis-cluster
## @param redis-cluster.enabled Enable redis
## @param redis-cluster.usePassword Whether to use password authentication
redis-cluster:
  enabled: true
  ## Bitnami Redis&reg; image version
  ## ref: https://hub.docker.com/r/bitnami/redis/tags/
  ## @param image.registry [default: REGISTRY_NAME] Redis&reg; cluster image registry
  ## @param image.repository [default: REPOSITORY_NAME/redis-cluster] Redis&reg; cluster image repository
  ## @skip image.tag Redis&reg; cluster image tag (immutable tags are recommended)
  ## @param image.digest Redis&reg; cluster image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
  ## @param image.pullPolicy Redis&reg; cluster image pull policy
  ## @param image.pullSecrets Specify docker-registry secret names as an array
  ## @param image.debug Enable image debug mode
  ##
  image:
    repository: bitnami/redis-cluster
    tag: 7.2-debian-12
  usePassword: false
  ## @section Redis&reg; statefulset parameters
  ##
  redis:
    ## Container resource requests and limits
    ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
    ## We usually recommend not to specify default resources and to leave this as a conscious
    ## choice for the user. This also increases chances charts run on environments with little
    ## resources, such as Minikube. If you do want to specify resources, uncomment the following
    ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    ## @param updateJob.resources.limits The resources limits for the container
    ## @param updateJob.resources.requests The requested resources for the container
    ##
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 50m
        memory: 64Mi
  ## Redis&reg; Cluster settings
  ##
  cluster:
    ## @param cluster.nodes The number of master nodes should always be >= 3, otherwise cluster creation will fail
    ##
    nodes: 6
    ## @param cluster.replicas Number of replicas for every master in the cluster
    ## Parameter to be passed as --cluster-replicas to the redis-cli --cluster create
    ## 1 means that we want a replica for every master created
    ##
    replicas: 1
  ## Enable persistence using Persistent Volume Claims
  ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    ## @param persistence.storageClass Storage class of backing PVC
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    storageClass: "nfs-client-ssd-0"
    ## @param persistence.size Size of data volume
    ##
    size: 250Mi
  ## @section Metrics sidecar parameters
  ##

  ## Prometheus Exporter / Metrics
  ##
  metrics:
    ## @param metrics.enabled Start a side-car prometheus exporter
    ##
    enabled: true
    ## Enable this if you're using https://github.com/coreos/prometheus-operator
    ##
    serviceMonitor:
      ## @param metrics.serviceMonitor.enabled If `true`, creates a Prometheus Operator ServiceMonitor (also requires `metrics.enabled` to be `true`)
      ##
      enabled: true
    ## @param metrics.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
    ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    ##
    resources:
      requests:
        cpu: 10m
        memory: 25Mi
      limits:
        cpu: 50m
        memory: 50Mi

## @section postgresql-ha
#
## @param postgresql-ha.enabled Enable postgresql-ha
## @param postgresql-ha.postgresql.password Password for the `gitea` user (overrides `auth.password`)
## @param postgresql-ha.global.postgresql.database Name for a custom database to create (overrides `auth.database`)
## @param postgresql-ha.global.postgresql.username Name for a custom user to create (overrides `auth.username`)
## @param postgresql-ha.global.postgresql.password Name for a custom password to create (overrides `auth.password`)
## @param postgresql-ha.postgresql.repmgrPassword Repmgr Password
## @param postgresql-ha.postgresql.postgresPassword postgres Password
## @param postgresql-ha.pgpool.adminPassword pgpool adminPassword
## @param postgresql-ha.service.ports.postgresql postgresql service port (overrides `service.ports.postgresql`)
## @param postgresql-ha.primary.persistence.size PVC Storage Request for postgresql-ha volume
postgresql-ha:
  enabled: true
  global:
    postgresql:
      database: gitea
      password: gitea
      username: gitea
  postgresql:
    ## ref: https://hub.docker.com/r/bitnami/postgresql/tags/
    ## @param postgresql.image.registry [default: REGISTRY_NAME] PostgreSQL with Repmgr image registry
    ## @param postgresql.image.repository [default: REPOSITORY_NAME/postgresql-repmgr] PostgreSQL with Repmgr image repository
    ## @skip postgresql.image.tag PostgreSQL with Repmgr image tag
    ## @param postgresql.image.digest PostgreSQL image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
    ## @param postgresql.image.pullPolicy PostgreSQL with Repmgr image pull policy
    ## @param postgresql.image.pullSecrets Specify docker-registry secret names as an array
    ## @param postgresql.image.debug Specify if debug logs should be enabled
    ##
    image:
      registry: docker.io
      repository: bitnami/postgresql-repmgr
      tag: 16-debian-12
    replicaCount: 1
    repmgrPassword: gitea
    postgresPassword: gitea
    password: gitea
    ## PostgreSQL containers' resource requests and limits
    ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
    ## We usually recommend not to specify default resources and to leave this as a conscious
    ## choice for the user. This also increases chances charts run on environments with little
    ## resources, such as Minikube. If you do want to specify resources, uncomment the following
    ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    ## @param postgresql.resources.limits The resources limits for the container
    ## @param postgresql.resources.requests The requested resources for the container
    ##
    resources:
      limits:
        memory: 512Mi
        cpu: 150m
      requests:
        memory: 256Mi
        cpu: 100m
    ## @param postgresql.upgradeRepmgrExtension Upgrade repmgr extension in the database
    ##
    upgradeRepmgrExtension: true
  pgpool:
    ## Bitnami Pgpool image
    ## ref: https://hub.docker.com/r/bitnami/pgpool/tags/
    ## @param pgpool.image.registry [default: REGISTRY_NAME] Pgpool image registry
    ## @param pgpool.image.repository [default: REPOSITORY_NAME/pgpool] Pgpool image repository
    ## @skip pgpool.image.tag Pgpool image tag
    ## @param pgpool.image.digest Pgpool image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
    ## @param pgpool.image.pullPolicy Pgpool image pull policy
    ## @param pgpool.image.pullSecrets Specify docker-registry secret names as an array
    ## @param pgpool.image.debug Specify if debug logs should be enabled
    ##
    image:
      registry: docker.io
      repository: bitnami/pgpool
      tag: 4-debian-12
    adminPassword: gitea
    ## Pgpool containers' resource requests and limits
    ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
    ## We usually recommend not to specify default resources and to leave this as a conscious
    ## choice for the user. This also increases chances charts run on environments with little
    ## resources, such as Minikube. If you do want to specify resources, uncomment the following
    ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    ## @param pgpool.resources.limits The resources limits for the container
    ## @param pgpool.resources.requests The requested resources for the container
    ##
    resources:
      limits:
        memory: 1Gi
        cpu: 200m
      requests:
        memory: 512Mi
        cpu: 150m
  service:
    ports:
      postgresql: 5432
  ## PostgreSQL Primary persistence configuration
  ##
  persistence:
    ## @param primary.persistence.enabled Enable PostgreSQL Primary data persistence using PVC
    ##
    enabled: true
    ## @param primary.persistence.existingClaim Name of an existing PVC to use
    ##
    existingClaim: pvc-gitea-postgresql-ha-primary
    ## @param primary.persistence.storageClass PVC Storage Class for PostgreSQL Primary data volume
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    storageClass: "-"
    ## @param primary.persistence.size PVC Storage Request for PostgreSQL volume
    ##
    size: 1Gi

  ## @section Metrics parameters

  ## PostgreSQL Prometheus exporter parameters
  ##
  metrics:
    ## Bitnami PostgreSQL Prometheus exporter image
    ## @param metrics.enabled Enable PostgreSQL Prometheus exporter
    ##
    enabled: true
    ## Metrics serviceMonitor parameters
    ## Enable this if you're using Prometheus Operator
    ##
    serviceMonitor:
      ## @param metrics.serviceMonitor.enabled if `true`, creates a Prometheus Operator ServiceMonitor (also requires `metrics.enabled` to be `true`)
      ##
      enabled: true
    ## @param metrics.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
    resources:
      requests:
        cpu: 10m
        memory: 25Mi
      limits:
        cpu: 50m
        memory: 50Mi

## @section PostgreSQL
#
## @param postgresql.enabled Enable PostgreSQL
## @param postgresql.global.postgresql.auth.password Password for the `gitea` user (overrides `auth.password`)
## @param postgresql.global.postgresql.auth.database Name for a custom database to create (overrides `auth.database`)
## @param postgresql.global.postgresql.auth.username Name for a custom user to create (overrides `auth.username`)
## @param postgresql.global.postgresql.service.ports.postgresql PostgreSQL service port (overrides `service.ports.postgresql`)
## @param postgresql.primary.persistence.size PVC Storage Request for PostgreSQL volume
postgresql:
  enabled: false
