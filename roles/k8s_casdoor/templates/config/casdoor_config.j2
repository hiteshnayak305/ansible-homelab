apiVersion: v1
kind: ConfigMap
metadata:
  name: casdoor-conf
  namespace: casdoor-system
data:
  app.conf: |
    appname = casdoor
    httpport = 8000
    runmode = prod
    SessionOn = true
    copyrequestbody = true
    driverName = mysql
    dataSourceName = root:{{ casdoor_mysql_root_password }}@tcp(casdoor-mysql:3306)/
    dbName = casdoor
    tableNamePrefix =
    showSql = false
    redisEndpoint =
    defaultStorageProvider =
    isCloudIntranet = false
    authState = "casdoor"
    socks5Proxy = "127.0.0.1:10808"
    verificationCodeTimeout = 10
    initScore = 0
    logPostOnly = true
    origin = "https://casdoor.hitesh.com"
    staticBaseUrl = "https://cdn.casbin.org"
    isDemoMode = false
    batchSize = 100
    enableGzip = true
    ldapServerPort = 389
    radiusServerPort = 1812
    radiusSecret = "secret"
    quota = {"organization": -1, "user": -1, "application": -1, "provider": -1}
    logConfig = {"filename": "logs/casdoor.log", "maxdays":7, "perm":"0770"}
    initDataFile = "/init/init_data.json"
    frontendBaseDir = "../casdoor"
  conf_quota.go: |
    // Copyright 2023 The Casdoor Authors. All Rights Reserved.
    //
    // Licensed under the Apache License, Version 2.0 (the "License");
    // you may not use this file except in compliance with the License.
    // You may obtain a copy of the License at
    //
    //      http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software
    // distributed under the License is distributed on an "AS IS" BASIS,
    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    // See the License for the specific language governing permissions and
    // limitations under the License.

    package conf

    import (
      "encoding/json"

      "github.com/beego/beego"
    )

    type Quota struct {
      Organization int `json:"organization"`
      User         int `json:"user"`
      Application  int `json:"application"`
      Provider     int `json:"provider"`
    }

    var quota = &Quota{-1, -1, -1, -1}

    func init() {
      initQuota()
    }

    func initQuota() {
      res := beego.AppConfig.String("quota")
      if res != "" {
        err := json.Unmarshal([]byte(res), quota)
        if err != nil {
          panic(err)
        }
      }
    }

    func GetConfigQuota() *Quota {
      return quota
    }
  conf_test.go: |
    // Copyright 2022 The Casdoor Authors. All Rights Reserved.
    //
    // Licensed under the Apache License, Version 2.0 (the "License");
    // you may not use this file except in compliance with the License.
    // You may obtain a copy of the License at
    //
    //      http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software
    // distributed under the License is distributed on an "AS IS" BASIS,
    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    // See the License for the specific language governing permissions and
    // limitations under the License.

    package conf

    import (
      "os"
      "testing"

      "github.com/beego/beego"
      "github.com/stretchr/testify/assert"
    )

    func TestGetConfString(t *testing.T) {
      scenarios := []struct {
        description string
        input       string
        expected    interface{}
      }{
        {"Should be return casbin", "appname", "casbin"},
        {"Should be return 8000", "httpport", "8000"},
        {"Should be return  value", "key", "value"},
      }

      // do some set up job

      os.Setenv("appname", "casbin")
      os.Setenv("key", "value")

      err := beego.LoadAppConfig("ini", "app.conf")
      assert.Nil(t, err)

      for _, scenery := range scenarios {
        t.Run(scenery.description, func(t *testing.T) {
          actual := GetConfigString(scenery.input)
          assert.Equal(t, scenery.expected, actual)
        })
      }
    }

    func TestGetConfInt(t *testing.T) {
      scenarios := []struct {
        description string
        input       string
        expected    interface{}
      }{
        {"Should be return 8000", "httpport", 8001},
        {"Should be return 8000", "verificationCodeTimeout", 10},
      }

      // do some set up job
      os.Setenv("httpport", "8001")

      err := beego.LoadAppConfig("ini", "app.conf")
      assert.Nil(t, err)

      for _, scenery := range scenarios {
        t.Run(scenery.description, func(t *testing.T) {
          actual, err := GetConfigInt64(scenery.input)
          assert.Nil(t, err)
          assert.Equal(t, scenery.expected, int(actual))
        })
      }
    }

    func TestGetConfBool(t *testing.T) {
      scenarios := []struct {
        description string
        input       string
        expected    interface{}
      }{
        {"Should be return false", "copyrequestbody", true},
      }

      err := beego.LoadAppConfig("ini", "app.conf")
      assert.Nil(t, err)
      for _, scenery := range scenarios {
        t.Run(scenery.description, func(t *testing.T) {
          actual := GetConfigBool(scenery.input)
          assert.Nil(t, err)
          assert.Equal(t, scenery.expected, actual)
        })
      }
    }

    func TestGetConfigQuota(t *testing.T) {
      scenarios := []struct {
        description string
        expected    *Quota
      }{
        {"default", &Quota{-1, -1, -1, -1}},
      }

      err := beego.LoadAppConfig("ini", "app.conf")
      assert.Nil(t, err)
      for _, scenery := range scenarios {
        quota := GetConfigQuota()
        assert.Equal(t, scenery.expected, quota)
      }
    }

    func TestGetConfigLogs(t *testing.T) {
      scenarios := []struct {
        description string
        expected    string
      }{
        {"Default log config", `{"filename": "logs/casdoor.log", "maxdays":99999, "perm":"0770"}`},
      }

      err := beego.LoadAppConfig("ini", "app.conf")
      assert.Nil(t, err)
      for _, scenery := range scenarios {
        quota := GetConfigString("logConfig")
        assert.Equal(t, scenery.expected, quota)
      }
    }
  conf.go: |
    // Copyright 2021 The Casdoor Authors. All Rights Reserved.
    //
    // Licensed under the Apache License, Version 2.0 (the "License");
    // you may not use this file except in compliance with the License.
    // You may obtain a copy of the License at
    //
    //      http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software
    // distributed under the License is distributed on an "AS IS" BASIS,
    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    // See the License for the specific language governing permissions and
    // limitations under the License.

    package conf

    import (
      "fmt"
      "os"
      "runtime"
      "strconv"
      "strings"

      "github.com/beego/beego"
    )

    func init() {
      // this array contains the beego configuration items that may be modified via env
      presetConfigItems := []string{"httpport", "appname"}
      for _, key := range presetConfigItems {
        if value, ok := os.LookupEnv(key); ok {
          err := beego.AppConfig.Set(key, value)
          if err != nil {
            panic(err)
          }
        }
      }
    }

    func GetConfigString(key string) string {
      if value, ok := os.LookupEnv(key); ok {
        return value
      }

      res := beego.AppConfig.String(key)
      if res == "" {
        if key == "staticBaseUrl" {
          res = "https://cdn.casbin.org"
        } else if key == "logConfig" {
          res = fmt.Sprintf("{\"filename\": \"logs/%s.log\", \"maxdays\":99999, \"perm\":\"0770\"}", beego.AppConfig.String("appname"))
        }
      }

      return res
    }

    func GetConfigBool(key string) bool {
      value := GetConfigString(key)
      if value == "true" {
        return true
      } else {
        return false
      }
    }

    func GetConfigInt64(key string) (int64, error) {
      value := GetConfigString(key)
      num, err := strconv.ParseInt(value, 10, 64)
      return num, err
    }

    func GetConfigDataSourceName() string {
      dataSourceName := GetConfigString("dataSourceName")

      runningInDocker := os.Getenv("RUNNING_IN_DOCKER")
      if runningInDocker == "true" {
        // https://stackoverflow.com/questions/48546124/what-is-linux-equivalent-of-host-docker-internal
        if runtime.GOOS == "linux" {
          dataSourceName = strings.ReplaceAll(dataSourceName, "localhost", "172.17.0.1")
        } else {
          dataSourceName = strings.ReplaceAll(dataSourceName, "localhost", "host.docker.internal")
        }
      }

      return dataSourceName
    }

    func GetLanguage(language string) string {
      if language == "" || language == "*" {
        return "en"
      }

      if len(language) != 2 || language == "nu" {
        return "en"
      } else {
        return language
      }
    }

    func IsDemoMode() bool {
      return strings.ToLower(GetConfigString("isDemoMode")) == "true"
    }

    func GetConfigBatchSize() int {
      res, err := strconv.Atoi(GetConfigString("batchSize"))
      if err != nil {
        res = 100
      }
      return res
    }

    func GetConfigRealDataSourceName(driverName string) string {
      var dataSourceName string
      if driverName != "mysql" {
        dataSourceName = GetConfigDataSourceName()
      } else {
        dataSourceName = GetConfigDataSourceName() + GetConfigString("dbName")
      }
      return dataSourceName
    }
