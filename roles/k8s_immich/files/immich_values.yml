---
## This chart relies on the common library chart from bjw-s
## You can find it at https://github.com/bjw-s/helm-charts/tree/main/charts/library/common
## Refer there for more detail about the supported values

# These entries are shared between all the Immich components

env:
  TZ: "Asia/Kolkata"
  CPU_CORES: "2"

image:
  tag: v1.122.3

immich:
  metrics:
    # Enabling this will create the service monitors needed to monitor immich with the prometheus operator
    enabled: true
  persistence:
    # Main data store for all photos shared between different components.
    library:
      # Automatically creating the library volume is not supported by this chart
      # You have to specify an existing PVC to use
      existingClaim: "pvc-immich"
  # configuration is immich-config.json converted to yaml
  # ref: https://immich.app/docs/install/config-file/
  #
  configuration:
    ffmpeg:
      threads: 1
    backup:
      database:
        enabled: false
    job:
      backgroundTask:
        concurrency: 2
      smartSearch:
        concurrency: 1
      metadataExtraction:
        concurrency: 1
      faceDetection:
        concurrency: 1
      search:
        concurrency: 1
      sidecar:
        concurrency: 1
      library:
        concurrency: 1
      migration:
        concurrency: 1
      thumbnailGeneration:
        concurrency: 1
      videoConversion:
        concurrency: 1
      notifications:
        concurrency: 1
    machineLearning:
      enabled: true
      urls:
        - "http://immich-machine-learning:3003"
    oauth:
      enabled: false
    passwordLogin:
      enabled: true
    storageTemplate:
      enabled: true
      hashVerificationEnabled: true
      template: "{{y}}/{{y}}-{{MM}}-{{dd}}/{{filename}}"
    library:
      scan:
        enabled: false
    server:
      externalDomain: "https://immich.hitesh.com"
      loginPageMessage: "Welcome to Immich!"

# Dependencies

postgresql:
  enabled: true
  ## Bitnami PostgreSQL image version
  ## ref: https://hub.docker.com/r/bitnami/postgresql/tags/
  ## @param image.registry [default: REGISTRY_NAME] PostgreSQL image registry
  ## @param image.repository [default: REPOSITORY_NAME/postgresql] PostgreSQL image repository
  ## @skip image.tag PostgreSQL image tag (immutable tags are recommended)
  ## @param image.digest PostgreSQL image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
  ## @param image.pullPolicy PostgreSQL image pull policy
  ## @param image.pullSecrets Specify image pull secrets
  ## @param image.debug Specify if debug values should be set
  ##
  image:
    registry: docker.io
    repository: tensorchord/pgvecto-rs
    tag: pg14-v0.2.0
  global:
    postgresql:
      auth:
        username: immich
        database: immich
        password: immich
        postgresPassword: immich
  ## @section PostgreSQL Primary parameters
  ##
  primary:
    ## @param primary.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
    resources:
      requests:
        cpu: 300m
        memory: 256Mi
      limits:
        cpu: 500m
        memory: 512Mi
    persistence:
      enabled: true
      storageClass: "-"
      existingClaim: "pvc-immich-postgresql-primary"
      accessModes:
        - ReadWriteOnce
      size: 1G
    ## @param primary.affinity Affinity for PostgreSQL primary pods assignment
    ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
    ## Note: primary.podAffinityPreset, primary.podAntiAffinityPreset, and primary.nodeAffinityPreset will be ignored when it's set
    ##
    affinity:
      nodeAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
                - key: kubernetes.io/hostname
                  operator: In
                  values:
                    - k8s-worker-01.hitesh.com

  ## @section Metrics Parameters
  ##

  metrics:
    ## @param metrics.enabled Start a prometheus exporter
    ##
    enabled: true
    ## @param metrics.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
    resources:
      requests:
        cpu: 10m
        memory: 32Mi
      limits:
        cpu: 50m
        memory: 64Mi
    ## Prometheus Operator ServiceMonitor configuration
    ##
    serviceMonitor:
      ## @param metrics.serviceMonitor.enabled Create ServiceMonitor Resource for scraping metrics using Prometheus Operator
      ##
      enabled: true

redis:
  enabled: true
  architecture: standalone
  auth:
    enabled: false
  global:
    storageClass: "nfs-client-ssd-0"
  master:
    ## @param master.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
    resources:
      limits:
        cpu: 200m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 64Mi
    persistence:
      size: 1Gi
  ## @section Metrics Parameters
  ##
  metrics:
    ## @param metrics.enabled Start a sidecar prometheus exporter to expose Redis&reg; metrics
    ##
    enabled: true
    ## @param metrics.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
    resources:
      requests:
        cpu: 10m
        memory: 25Mi
      limits:
        cpu: 50m
        memory: 50Mi
    ## Prometheus Service Monitor
    ## ref: https://github.com/coreos/prometheus-operator
    ##      https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
    ##
    serviceMonitor:
      ## @param metrics.serviceMonitor.enabled Create ServiceMonitor resource(s) for scraping metrics using PrometheusOperator
      ##
      enabled: true

# Immich components

server:
  enabled: true
  # -- Set the resource requests / limits for the container.
  resources:
    limits:
      cpu: 1
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
  ingress:
    main:
      enabled: false
  probes:
    startup:
      enabled: true
      # -- The spec field contains the values for the default startupProbe.
      # If you selected `custom: true`, this field holds the definition of the startupProbe.
      # @default -- See below
      spec:
        initialDelaySeconds: 60
        ## This means it has a maximum of 10*60=600 seconds to start up before it fails
        periodSeconds: 10
        failureThreshold: 60

machine-learning:
  enabled: false
