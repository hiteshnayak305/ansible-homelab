controller:
  # Below is the implementation of Jenkins Configuration as Code.  Add a key under configScripts for each configuration area,
  # where each corresponds to a plugin or section of the UI.  Each key (prior to | character) is just a label, and can be any value.
  # Keys are only used to give the section a meaningful name.  The only restriction is they may only contain RFC 1123 \ DNS label
  # characters: lowercase letters, numbers, and hyphens.  The keys become the name of a configuration yaml file on the controller in
  # /var/jenkins_home/casc_configs (by default) and will be processed by the Configuration as Code Plugin.  The lines after each |
  # become the content of the configuration yaml file.  The first line after this is a JCasC root element, eg jenkins, credentials,
  # etc.  Best reference is https://<jenkins_url>/configuration-as-code/reference.  The example below creates a welcome message:
  JCasC:
    configScripts:
      credentials: |
        credentials:
          system:
            domainCredentials:
              - credentials:
                - usernamePassword:
                    scope: GLOBAL
                    id: gitea-admin
                    username: "${gitea-admin-user}"
                    password: "${gitea-admin-password}"
                    description: "Credential for Gite admin access"
                - usernamePassword:
                    scope: GLOBAL
                    id: mail-admin
                    username: "${mail-credentials-secret-mail-admin-user}"
                    password: "${mail-credentials-secret-mail-admin-password}"
                    description: "Credential for Mail admin access"
                - usernamePassword:
                    scope: GLOBAL
                    id: test-authentik-client
                    username: "${test-authentik-credentials-secret-client-id}"
                    password: "${test-authentik-credentials-secret-client-secret}"
                    description: "Credential for Test Authentik Client"
